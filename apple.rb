apple = "Yamanasi" #この行を追加
if apple == "Aomori"
  puts "このリンゴは青森県産です。"
elsif apple == "Nagano"
  puts "このリンゴは青森県産ではなく、長野県産です。"
else
  puts "このリンゴは青森県産でも長野県産でもありません。"
end

# elsif、else
# if式では、elseを使うことでifの条件式の返り値が偽であった場合の処理を設定できます。
# 基本の書き方は以下のようになります。

# if 条件式
#   処理1  # 条件式の返り値が真だったら処理1を行う
# else
#   処理2  # 条件式の返り値が偽だったら処理2を行う
# end
# さらに、elsifを使うことで条件・処理を追加することができます。
# elsifはいくつでも追加可能です。

# if 条件式1
#   処理1  # 条件式1の返り値が真だったら処理1を行う
# elsif 条件式2
#   処理2  # 条件式1の返り値が偽、かつ条件式2の返り値が真だったら処理2を行う
# elsif 条件式3
#   処理3  # 条件式1と条件式2の返り値が偽、かつ条件式3の返り値が真だったら処理3を行う
# # ...(中略)...
# elsif 条件式n
#   処理n  # 条件式1～条件式n-1の返り値が全て偽、かつ条件式nの返り値が真だったら処理nを行う
# else
#   処理x  # 条件式1～条件式nの返り値が全て偽だったら処理xを行う
# end

# if・elsif・else
# 条件式、真偽値、それらの条件によく用いられる比較演算子・論理演算子について学びました。
# 組み合わせることで、多様な条件分岐を実装することができます。
# Rubyの次に学習するRailsでも多く使用されますので、使い方に慣れていきましょう。
# また、Rubyの条件分岐には、他にもcase_when、unless、三項演算子、後置ifなど、様々な書き方があります。
# それぞれにメリットや特徴があるので、是非調べてみてください。

